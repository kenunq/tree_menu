"""
Django settings for TestTask project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h77gi3w@dis!%87127lffol+84igyh$fbs^&6-&4m)+dduidg&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TestTask.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestTask.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Подсчет запросов из бд
#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": { # словарь с шаблонами форматирования строки
#         # "verbose": { # расширенный
#         #     "format": "{levelname} {asctime} {module}.py {process:d} {thread:d} {message}",
#         #     "style": "{",
#         # },
#         "medium": { # средний
#             "format": "{levelname} {asctime} {module}.py {message}", # {server_time}
#             "style": "{",
#         },
#         "simple": { # простой
#             "format": "\n{levelname} {message}\n",
#             "style": "{",
#         },
#         "simple_db": { # простой с пробелами
#             "format": "\n{message}\n",
#             "style": "{",
#         },
#     },
#     "filters": { # словарь с фильтрами
#         "require_debug_true": { # писать лог сообщение только при DEBUG = True
#             "()": "django.utils.log.RequireDebugTrue",
#         },
#         "require_debug_false": { # писать лог сообщение только при DEBUG = False
#             "()": "django.utils.log.RequireDebugFalse",
#         },
#     },
#     "handlers": { # словарь с обработчиками логов
#         "console_local_db": {
#             "level": "DEBUG", # все уровни >= указанного уровня будут обработаны этим обработчиком
#             "filters": ["require_debug_true"],
#             "class": "logging.StreamHandler",
#             "formatter": "simple_db",
#         },
#         "console_local": {
#             "level": "DEBUG", # все уровни >= указанного уровня будут обработаны этим обработчиком
#             "filters": ["require_debug_true"],
#             "class": "logging.StreamHandler",
#             "formatter": "simple",
#         },
#         "console_prod": {
#             "level": "INFO", # все уровни >= указанного уровня будут обработаны этим обработчиком
#             "filters": ["require_debug_false"],
#             "class": "logging.StreamHandler",
#             "formatter": "medium",
#         },
#         # "file": {
#         #     "level": "ERROR", # все уровни >= указанного уровня будут обработаны этим обработчиком
#         #     "filters": ["require_debug_false"],
#         #     "class": "logging.FileHandler",
#         #     "formatter": "medium",
#         #     "filename": BASE_DIR / "logs/log.log", # директория "logs/" должна быть создана вручную.
#         # },
#     },
#     "loggers": {
#         "main_app": { # название приложения
#             "handlers": ["console_local", "console_prod"],
#             "level": "INFO", # все уровни >= указанного уровня будут переданы в указанные обработчики
#         },
#         # выводить все SQL запросы в консоль
#         "django.db.backends": {
#             "handlers": ["console_local_db"],
#             "level": "DEBUG",
#         },
#     },
# }